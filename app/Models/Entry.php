<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Backpack\CRUD\CrudTrait;

class Entry extends Model
{
    use CrudTrait;

    /*
   |--------------------------------------------------------------------------
   | GLOBAL VARIABLES
   |--------------------------------------------------------------------------
   */

    protected $table = 'entries';
    protected $primaryKey = 'id';
    public $timestamps = true;
    // protected $guarded = ['id'];
    protected $fillable = ['company_id', 'business_type_id', 'signed_by', 'visual', 'mo', 'renew_by', 'ad_format_id', 'state_id', 'town_id', 'site_location_id', 'in_charge', 'out_charge', 'duration', 'expiry', 'rental', 'lighting', 'production', 'remarks'];
    // protected $hidden = [];
    // protected $dates = [];

    /*
    |--------------------------------------------------------------------------
    | FUNCTIONS
    |--------------------------------------------------------------------------
    */

    public static function create(array $attributes = [])
    {
        if (!isset($attributes['rental']) && !isset($attributes['lighting']) && !isset($attributes['production']) && isset($attributes['costing'])) {
            $costing                  = json_decode($attributes['costing'], true);
            $attributes['rental']     = $costing[0]['rental'];
            $attributes['lighting']   = $costing[0]['lighting'];
            $attributes['production'] = $costing[0]['production'];
            unset($attributes['costing']);
        }

        if (isset($attributes['in_charge']) && isset($attributes['out_charge'])) {
            $in_charge              = strtotime($attributes['in_charge']);
            $out_charge             = strtotime($attributes['out_charge']);
            $attributes['duration'] = floor(($out_charge - $in_charge) / (60 * 60 * 24));
            $now                    = time();
            $attributes['expiry']   = floor(($out_charge - $now) / (60 * 60 * 24));
        }


//        die(print_r($attributes));
        return parent::create($attributes); // TODO: Change the autogenerated stub
    }

    /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    */

    public function company()
    {
        return $this->belongsTo('App\Models\Company');
    }

    public function businessType()
    {
        return $this->belongsTo('App\Models\BusinessType');
    }

    public function adFormat()
    {
        return $this->belongsTo('App\Models\AdFormat');
    }

    public function state()
    {
        return $this->belongsTo('App\Models\State');
    }

    public function town()
    {
        return $this->belongsTo('App\Models\Town');
    }

    public function siteLocation()
    {
        return $this->belongsTo('App\Models\SiteLocation');
    }

    /*
    |--------------------------------------------------------------------------
    | SCOPES
    |--------------------------------------------------------------------------
    */

    public function scopeCountState($query, $company_id)
    {
        return $query->select(\DB::raw('count(*) as state_count, state_id'))->where('company_id', $company_id)->groupBy('state_id')->orderBy('state_count', 'desc')->with('state');
    }

    public function scopeCountTown($query, $company_id, $state = 0)
    {
        if ($state) {
            return $query->select(\DB::raw('count(*) as town_count, state_id, town_id'))->where('company_id', $company_id)->where('state_id', $state)->groupBy('state_id', 'town_id')->orderBy('state_id', 'desc')->with(['state', 'town']);
        }
        return $query->select(\DB::raw('count(*) as town_count, state_id, town_id'))->where('company_id', $company_id)->groupBy('state_id', 'town_id')->orderBy('state_id', 'desc')->with(['state', 'town']);


    }

    public function scopeCountBusinessType($query, $company_id)
    {
        return $query->select(\DB::raw('count(*) as bt_count, business_type_id'))->where('company_id', $company_id)->groupBy('business_type_id')->orderBy('bt_count', 'desc')->with('businessType');
    }




    /*
    |--------------------------------------------------------------------------
    | ACCESORS
    |--------------------------------------------------------------------------
    */

    /*
    |--------------------------------------------------------------------------
    | MUTATORS
    |--------------------------------------------------------------------------
    */
}
